package normal_test

import (
	"fmt"
	"math/rand"
	"strings"
	"testing"
	"time"

	"github.com/shivakar/random/distribution/internal/distribtest"
	"github.com/shivakar/random/distribution/normal"
	"github.com/shivakar/random/prng"
	"github.com/shivakar/random/prng/mt19937"
	"github.com/shivakar/random/prng/splitmix64"
	"github.com/shivakar/random/prng/xoroshiro128plus"
	"github.com/shivakar/random/prng/xorshift1024star"
	"github.com/shivakar/random/prng/xorshift128plus"
	"github.com/stretchr/testify/assert"
)

func Test_Normal_GetParams(t *testing.T) {
	assert := assert.New(t)
	data := [...]struct {
		a float64
		b float64
	}{
		{0.0, 1.0},
		{3.0, 5.0},
		{-1.0, 4.0},
	}

	r := mt19937.New(0)
	for _, rec := range data {
		d := normal.New(r, rec.a, rec.b)
		params := d.GetParams()
		assert.Equal(rec.a, params[0])
		assert.Equal(rec.b, params[1])
	}
}

func Test_Normal_CDF(t *testing.T) {
	assert := assert.New(t)
	data := [...]struct {
		m float64
		s float64
		x []float64
		c []float64
	}{
		{0.000000, 1.000000,
			[]float64{0.162645812722, 0.0420910649353, 0.493514538721, 0.0223251355667, 0.489628630941, 0.582964943859, 0.981844847029, 0.496692354268, -1.0, 2.0},
			[]float64{0.564601343052, 0.516786948496, 0.689175465197, 0.508905700703, 0.687801643663, 0.720041550142, 0.836911854815, 0.690296992549, 0.158655253931, 0.977249868052},
		},
		{3.000000, 5.000000,
			[]float64{3.56851342897, 3.69441373117, 4.41679395844, 4.99173802359, 4.46832000103, 4.9862315466, 3.83615406752, 3.81662553679, 2.0, 6.0},
			[]float64{0.545263258312, 0.555228597332, 0.61154909308, 0.654813012895, 0.615492667188, 0.65440708213, 0.566405779937, 0.564868766749, 0.420740290561, 0.72574688225},
		},
		{-1.000000, 4.000000,
			[]float64{1.1065276754, 1.47880682472, 0.85943181562, 2.99061570964, 1.91221829415, 1.4492557868, 1.36549594124, 1.09778050074, -2.0, 5.0},
			[]float64{0.700775389041, 0.732272903911, 0.678983408812, 0.840776399275, 0.766709910027, 0.729834968005, 0.72286506648, 0.700015511247, 0.401293674317, 0.933192798731},
		},
		{4.000000, 1.000000,
			[]float64{1.01930947286, 3.60341774703, 1.73620743433, 3.11354435391, 1.42757252114, 3.7562400212, 1.20615404349, 2.07286738175, 3.0, 2.0},
			[]float64{0.00143799635719, 0.34583777086, 0.0117934379949, 0.187686022415, 0.00504940555825, 0.403708358869, 0.0026042641596, 0.0269815523299, 0.158655253931, 0.0227501319482},
		},
		{-10.000000, 3.000000,
			[]float64{-8.4402649011, -5.56606397798, 2.15391517425, -8.61482619382, -3.5022350555, -0.782600008462, -8.44525856484, -7.92759519992, -11.0, 4.0},
			[]float64{0.69843743973, 0.930293256763, 0.999974533625, 0.677860586934, 0.984841412628, 0.998938512278, 0.697857077464, 0.755154885031, 0.369441340182, 0.999998469373},
		},
		{84.000000, 4.800000,
			[]float64{17.0786094797, 73.5471623961, 50.1741039445, 66.9997008435, 51.202189227, 32.5066243281, 65.0155185706, 68.2425664982, 83.0, 5.8},
			[]float64{1.76076646897e-44, 0.0147151393088, 9.13676675783e-13, 0.000198756828314, 4.1614086455e-12, 3.76900486707e-27, 3.82512752305e-05, 0.000513910256651, 0.417484353179, 5.65522070404e-60},
		},
		{-250.000000, 3.000000,
			[]float64{-141.478284111, -75.6344745159, -120.057427999, -175.106262834, -99.9997254748, -204.649590401, -78.0280393315, -210.985023619, -251.0, 4.0},
			[]float64{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.369441340182, 1.0},
		},
		{250.000000, 3.000000,
			[]float64{177.666340123, 196.709979095, 220.5751834, 220.339087182, 3.84404711189, 40.7445885627, 219.746382432, 170.759116463, 249.0, 4.0},
			[]float64{9.53228460863e-129, 6.79503670946e-71, 5.18646912465e-23, 2.3707893675e-23, 0.0, 0.0, 3.23339478275e-24, 4.77784447707e-154, 0.369441340182, 0.0},
		},
	}

	for _, rec := range data {
		d := normal.New(mt19937.New(0), rec.m, rec.s)
		for i := range rec.x {
			assert.InDelta(rec.c[i], d.CDF(rec.x[i]), float64(1e-12))
		}
	}
}

func Test_Normal_PDF(t *testing.T) {
	assert := assert.New(t)
	data := [...]struct {
		m float64
		s float64
		x []float64
		c []float64
	}{
		{0.000000, 1.000000,
			[]float64{0.104933080311, 0.484859967438, 0.278672915449, 0.114519754972, 0.369295732409, 0.0845051756732, 0.127545758196, 0.124336172075, -1.0, 2.0},
			[]float64{0.396751948325, 0.354699925508, 0.383748522555, 0.39633481983, 0.372645317854, 0.397520372129, 0.395710461326, 0.395870447098, 0.241970724519, 0.0539909665132},
		},
		{3.000000, 5.000000,
			[]float64{4.87651747699, 4.031179436, 3.21602949983, 3.91054659934, 4.65298068155, 4.02516935923, 3.08665215022, 3.39026245702, 2.0, 6.0},
			[]float64{0.0743625516076, 0.0781095409595, 0.079714018283, 0.0784763206217, 0.0755452587784, 0.0781288501718, 0.0797764749957, 0.0795457825977, 0.0782085387951, 0.0666449205784},
		},
		{-1.000000, 4.000000,
			[]float64{3.23594074296, 3.32252019625, 0.000957000732435, 1.2276214955, 0.153516699805, 0.911063245485, 1.64916438394, 3.59195921579, -2.0, 5.0},
			[]float64{0.0569285841621, 0.0556255002213, 0.096661244706, 0.0854089235823, 0.0956734767774, 0.0889782803911, 0.0800945359785, 0.051603117621, 0.0966670292007, 0.0323793989165},
		},
		{4.000000, 1.000000,
			[]float64{2.12040790879, 3.31892753679, 1.99981092239, 2.18538787252, 2.46848206002, 1.15036506066, 1.28856805556, 2.26734567267, 3.0, 2.0},
			[]float64{0.0681958376258, 0.316361926656, 0.053970552442, 0.0768924859048, 0.123475548121, 0.00687992053709, 0.0101035328632, 0.0889230364634, 0.241970724519, 0.0539909665132},
		},
		{-10.000000, 3.000000,
			[]float64{-6.79830649277, -5.61642310296, -9.88469565776, -4.28993634211, 2.49397441015, -6.70852989759, -4.65376712714, -2.44215417654, -11.0, 4.0},
			[]float64{0.0752422774403, 0.0457258137058, 0.132882574657, 0.0217328552125, 2.277745061e-05, 0.0728445737082, 0.0271751819266, 0.00556676284191, 0.125794409231, 2.48201529021e-06},
		},
		{84.000000, 4.800000,
			[]float64{59.973579132, 80.183436928, 36.2816878068, 17.8184191655, 49.7118395572, 76.7624040254, 68.3116717554, 63.9721750774, 83.0, 5.8},
			[]float64{3.01320505153e-07, 0.0605878914574, 2.87781211436e-23, 4.35570110571e-43, 6.90473516249e-13, 0.0266668550888, 0.000398111140176, 1.37801640561e-05, 0.0813287383209, 1.92661513408e-59},
		},
		{-250.000000, 5.000000,
			[]float64{-47.6541980901, -145.736809234, -78.5321170783, -76.8148976653, -212.307054297, -10.60327728, -146.069861283, -215.170016681, -251.0, 6.0},
			[]float64{0.0, 3.01480004056e-96, 3.35783016287e-257, 2.42862318218e-262, 3.64243254747e-14, 0.0, 1.20651099109e-95, 2.31657525153e-12, 0.0782085387951, 0.0},
		},
		{350.000000, 4.000000,
			[]float64{254.52433943, 11.8470558192, 52.350742772, 277.423418448, 305.53020421, 77.0489128971, 114.17932327, 72.7797085636, 349.0, 5.0},
			[]float64{1.92581391425e-125, 0.0, 0.0, 3.24940844293e-73, 1.4452960201e-28, 0.0, 0.0, 0.0, 0.0966670292007, 0.0},
		},
	}

	for _, rec := range data {
		d := normal.New(mt19937.New(0), rec.m, rec.s)
		for i := range rec.x {
			assert.InDelta(rec.c[i], d.PDF(rec.x[i]), float64(1e-12))
		}
	}
}

func Test_Normal_Float64(t *testing.T) {
	assert := assert.New(t)
	engines := [...]struct {
		r    prng.Engine
		name string
	}{
		{mt19937.New(0), "mt19937"},
		{splitmix64.New(0), "splitmix64"},
		{xoroshiro128plus.New(0), "tinymt64"},
		{xorshift128plus.New(0), "xorshift128plus"},
		{xorshift1024star.New(0), "xorshift1024star"},
	}
	for _, engine := range engines {
		data := []struct {
			l float64
			s float64
		}{
			{0, 1},
			{2, 3},
			{-5, 8},
			{-10, 2},
			{22, 3},
			{82, 4.8},
			{-35, 3},
			{-67, 6},
			{90, 1},
		}
		for _, rec := range data {
			d := normal.New(engine.r, rec.l, rec.s)

			_, pval := distribtest.KSTest(d)
			assert.True(pval > 0.001, fmt.Sprintf("%s, pval:%.6f for (%.6f, %.6f)",
				engine.name, pval, rec.l, rec.s))

			// For normality tests Anderson-Darling test is considered
			// to be better than Kolmogorov-Smirnov test.
			// So doing both
			a2, pval, critvals, sigvals := distribtest.ADTest(d)
			assert.True(pval > 0.001, fmt.Sprintf("%s, pval:%.6f for (%.6f, %.6f)",
				engine.name, pval, rec.l, rec.s))

			// Normality is rejected if a2 > critval at any significance level
			for i, v := range critvals {
				assert.True(a2 < v,
					fmt.Sprintf("%s, a2: %.6f, crit:%.6f, sig: %f for (%.6f, %.6f)",
						engine.name, a2, v, sigvals[i], rec.l, rec.s))
			}
		}
	}
}

// Benchmarks
func Benchmark_BuiltInPRNG_NormFloat64(b *testing.B) {
	d := rand.New(rand.NewSource(time.Now().UnixNano()))
	x := 0.0
	y := 1.0
	for i := 0; i < b.N; i++ {
		_ = x + (y-x)*d.NormFloat64()
	}
}

func Benchmark_Normal_MT19937_Float64(b *testing.B) {
	d := normal.New(mt19937.New(0), 0.0, 1.0)
	for i := 0; i < b.N; i++ {
		_ = d.Float64()
	}
}

func Benchmark_Normal_SplitMix64_Float64(b *testing.B) {
	d := normal.New(splitmix64.New(0), 0.0, 1.0)
	for i := 0; i < b.N; i++ {
		_ = d.Float64()
	}
}

func Benchmark_Normal_Xoroshiro128Plus_Float64(b *testing.B) {
	d := normal.New(xoroshiro128plus.New(0), 0.0, 1.0)
	for i := 0; i < b.N; i++ {
		_ = d.Float64()
	}
}

func Benchmark_Normal_Xorshift128Plus_Float64(b *testing.B) {
	d := normal.New(xorshift128plus.New(0), 0.0, 1.0)
	for i := 0; i < b.N; i++ {
		_ = d.Float64()
	}
}

func Benchmark_Normal_Xorshift1024Star_Float64(b *testing.B) {
	d := normal.New(xorshift1024star.New(0), 0.0, 1.0)
	for i := 0; i < b.N; i++ {
		_ = d.Float64()
	}
}

// Example - Normal Distribution
func ExampleNormal() {
	// Example based on
	// http://www.cplusplus.com/reference/random/normal_distribution/
	r := xorshift128plus.New(20170611)
	d := normal.New(r, 5.0, 2.0)

	var p [10]int

	nrolls := 10000
	nstars := 100
	for i := 0; i < nrolls; i++ {
		n := d.Float64()
		if n >= 0.0 && n < 10.0 {
			p[int(n)]++
		}
	}

	fmt.Println("Normal Distribution: mu=5.0, sigma=2.0")

	for i := 0; i < 10; i++ {
		v := p[i] * nstars / nrolls

		fmt.Printf("%2d-%2d: %s (%d)\n", i, i+1,
			strings.Repeat("*", v), v)
	}

	// Output:
	// Normal Distribution: mu=5.0, sigma=2.0
	//  0- 1: * (1)
	//  1- 2: **** (4)
	//  2- 3: ******** (8)
	//  3- 4: *************** (15)
	//  4- 5: ******************* (19)
	//  5- 6: ******************* (19)
	//  6- 7: ************** (14)
	//  7- 8: ******** (8)
	//  8- 9: **** (4)
	//  9-10: * (1)
}
